%% Load data and training
clear('all');
close('all');
clc

%% Load dataset file
% If reconstructing the features and labels is
% necessary, load the file named 'hpp_data_*'
% If you want to directly load the previously 
% constructed feature-label, load the file named 
% 'feature_label_*'
[file, path] = uigetfile('../hyperplane_dataset/*.mat', 'Select Raw Dataset');
load([path, file])

%% Construct features and labels, if needed
% Otherwise skip these sections
% ======================================
N = 20;

all_feature = [];
all_label   = [];

for exp_num = 1:length(training_set)

	training_data = training_set{exp_num};

	if isempty(training_data)
		continue
	end

	for t = 1:length(training_data)-N
		[feature, label, ~] = gen_feature_label(training_data, t, N);

		% Append into the 3rd dim
		all_feature = cat(3, all_feature, feature);
		all_label   = cat(3, all_label, label);
	end
end

%% Reshape
batch_size = size(all_feature, 3);

feature_flat = reshape(all_feature, [], batch_size);
label_flat   = reshape(all_label, [], batch_size);

%% Shuffle
col_perm = randperm(batch_size);
feature_flat = feature_flat(:, col_perm);
label_flat   = label_flat(:, col_perm);
% ======================================

%% Train
% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 26-Jul-2020 10:24:15
%
% This script assumes these variables are defined:
%
%   feature_flat - input data.
%   label_flat - target data.

x = feature_flat;
t = label_flat;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation

% Create a Fitting Network
hiddenLayerSize = 73;
net = fitnet(hiddenLayerSize,trainFcn);

% Custom Properties
net.trainParam.epochs = 2000;
% net.trainParam.lr = 0.02;
% For a list of all transfer/activation functions type: help nntransfer
transferFcn = 'poslin'; % 'tansig' is default
for i = 1:length(hiddenLayerSize)
	net.layers{i}.transferFcn = transferFcn;
end

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t, ...
					'useParallel', 'yes', ...
					'useGPU', 'yes');

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

%% Save the network as model
uisave({'net', 'tr'}, [trainFcn, ...
						'_h', num2str(hiddenLayerSize, '-%d'), ...
						'_tF-', transferFcn, ...
						'_ep', num2str(net.trainParam.epochs), ...
						'_', datestr(now,'yyyy-mm-dd_HH-MM'), ...
						'.mat'])